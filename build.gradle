import groovy.json.JsonSlurper
import groovy.json.JsonBuilder

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.0+'
        classpath 'de.undercouch:gradle-download-task:1.0'
    }
}

apply plugin: 'download-task'
apply plugin: 'android'

repositories {
    maven { url "http://dl.bintray.com/populov/maven" }
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.google.android.gms:play-services:4.0.30'
    compile 'com.actionbarsherlock:actionbarsherlock:4.4.0@aar'
    compile 'com.android.support:support-v4:18.0.+'
    compile 'com.github.chrisbanes.actionbarpulltorefresh:extra-abs:0.8'
    compile 'com.viewpagerindicator:library:2.4.1@aar'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
    }


}


android.applicationVariants.all{ variant ->
    variant.mergeResources.doLast {
        File configFile = file("config.json")
        String resDir= "${buildDir}/res/all/${variant.dirName}"
        File valuesFile = file(resDir+"/values/values.xml")
        File valuesFrFile = file(resDir+"/values-fr/values.xml")
        File categoriesFile = file(resDir+"/raw/categoriesdata.json")
        File contributorsFile = file(resDir+"/raw/contributorsdata.json")
        File sessionsFile = file(resDir+"/raw/sessionsdata.json")
        File speackersFile = file(resDir+"/raw/speackersdata.json")
        File sponsorsFile = file(resDir+"/raw/sponsorsdata.json")

        JsonSlurper slurper = new JsonSlurper()
        def config = slurper.parseText( configFile.getText('UTF-8') )
        //App name//
        println("Replacing app title values")
        replaceLine(valuesFile,"<string name=\"app_name\">JCertif</string>","<string name=\"app_name\">"+config.title+"</string>" )
        println("Replacing app title values-fr")
        replaceLine(valuesFrFile,"<string name=\"app_name\">JCertif</string>","<string name=\"app_name\">"+config.title+"</string>" )
        //Data//
        println("Replacing categories json data")
        replaceContent(categoriesFile,config.categories)
        println("Replacing contributors json data")
        replaceContent(contributorsFile,config.contributors)
        println("Replacing sessions json data")
        replaceContent(sessionsFile,config.sessions)
        println("Replacing speackers json data")
        replaceContent(speackersFile,config.speackers)
        println("Replacing sponsors json data")
        replaceContent(sponsorsFile,config.sponsors)
        //Ic_launcher//
        println("Replacing ic_launcher hdpi")
        replaceFromUrl(config.launcher_hdpi,resDir+"/drawable-hdpi")
        println("Replacing ic_launcher mdpi")
        replaceFromUrl(config.launcher_mdpi,resDir+"/drawable-mdpi")
        println("Replacing ic_launcher xhdpi")
        replaceFromUrl(config.launcher_xhdpi,resDir+"/drawable-xhdpi")
        println("Replacing ic_launcher xxhdpi")
        replaceFromUrl(config.launcher_xxhdpi,resDir+"/drawable-xxhdpi")
        //Title Bar//
        println("Replacing TitleBar hdpi")
        replaceFromUrl(config.titlebar_hdpi_bottom,resDir+"/drawable-hdpi")
        replaceFromUrl(config.titlebar_hdpi_solid,resDir+"/drawable-hdpi")
        replaceFromUrl(config.titlebar_hdpi_transparent,resDir+"/drawable-hdpi")
        println("Replacing TitleBar mdpi")
        replaceFromUrl(config.titlebar_mdpi_bottom,resDir+"/drawable-mdpi")
        replaceFromUrl(config.titlebar_mdpi_solid,resDir+"/drawable-mdpi")
        replaceFromUrl(config.titlebar_mdpi_transparent,resDir+"/drawable-mdpi")
        println("Replacing TitleBar xhdpi")
        replaceFromUrl(config.titlebar_xhdpi_bottom,resDir+"/drawable-xhdpi")
        replaceFromUrl(config.titlebar_xhdpi_solid,resDir+"/drawable-xhdpi")
        replaceFromUrl(config.titlebar_xhdpi_transparent,resDir+"/drawable-xhdpi")


    }
}

def replaceContent(File file, data) {
    file.write(new JsonBuilder ( data ).toPrettyString(), 'UTF-8')
}

def replaceLine(File file, String oldLine, String newLine) {
    String content = file.getText('UTF-8')
    content = content.replaceAll(oldLine, newLine)
    file.write(content, 'UTF-8')
}

def replaceFromUrl(String url, String destDir){

    download {
        src url
        dest destDir
        overwrite true
    }

}

